apply plugin: 'com.jfrog.bintray'

// add sources jar tasks as artifacts
artifacts {
    archives sourcesJar
    archives javadocJar
    archives file: new File("${project.buildDir}/outputs/aar/${project.name}-release.aar"),
            name: "${project.name}-release.aar",
            type: "aar"
}

// Create the pom configuration:
def pomConfig = {
    name CODENAME
    description DESC
    url WEBSITE

    licenses {
        license {
            name LICENSE
            url LICENSE_URL
            distribution "repo"
        }
    }
    developers {
        developer {
            id "algolia"
            name "The Algolia Team"
            email "hey@algolia.com"
        }
    }
    scm {
        connection REPO
        developerConnection REPO
        url WEBSITE

    }
}

publishing.publications {
    BintrayPublication(MavenPublication) {
        artifact sourcesJar
        artifact javadocJar
        artifact "${project.buildDir}/outputs/aar/${project.name}-release.aar"

        groupId GROUP
        artifactId BASENAME
        version VERSION
        description DESC

        pom.withXml {
            def root = asNode()
            root.children().last() + pomConfig
            root.appendNode("description", DESC) //TODO Find why description is missing from pom.xml

            final dependenciesNode = asNode().appendNode('dependencies')
            ext.addDependency = { Dependency dep, String scope ->
                if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified") {
                    return // ignore invalid dependencies
                }

                // Convert our internal module names into IS artifacts when releasing
                //TODO: Find a way to avoid mapping modules manually
                final modulesMap = [
                        "core": "instantsearch-android-core",
                        "ui"  : "instantsearch-android"
                ]
                final depFinalName = dep.group == "com.algolia" && modulesMap.containsKey(dep.name) ?
                        modulesMap.get(dep.name) : dep.name
                println "Adding dependency $depFinalName ($scope) to pom.xml"

                final dependencyNode = dependenciesNode.appendNode('dependency')
                dependencyNode.appendNode('groupId', dep.group)
                dependencyNode.appendNode('artifactId', depFinalName)
                dependencyNode.appendNode('version', dep.version)
                dependencyNode.appendNode('scope', scope)

                if (!dep.transitive) {
                    // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                    final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                    exclusionNode.appendNode('groupId', '*')
                    exclusionNode.appendNode('artifactId', '*')
                } else if (!dep.properties.excludeRules.empty) {
                    // Otherwise add specified exclude rules
                    final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                    dep.properties.excludeRules.each { ExcludeRule rule ->
                        exclusionNode.appendNode('groupId', rule.group ?: '*')
                        exclusionNode.appendNode('artifactId', rule.module ?: '*')
                    }
                }
            }

            // List all "compile" dependencies (for old Gradle)
            configurations.compile.getAllDependencies().each { dep -> addDependency(dep, "compile") }
            // List all "api" dependencies (for new Gradle) as "compile" dependencies
            configurations.api.getAllDependencies().each { dep -> addDependency(dep, "compile") }
            // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
            configurations.implementation.getAllDependencies().each { dep -> addDependency(dep, "runtime") }
        }
    }
}

group = GROUP
version = VERSION

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')

    publications = ['BintrayPublication']
    publish = true // auto publish after upload
    pkg {
        repo = 'maven'
        name = CODENAME
        desc = DESC
        licenses = [LICENSE]
        websiteUrl = WEBSITE
        issueTrackerUrl = WEBSITE + "/issues/"
        vcsUrl = REPO
        labels = LABELS
        githubRepo = GITHUB
        githubReleaseNotesFile = 'README.md'
        publicDownloadNumbers = true

        version {
            name = VERSION
            desc = "Version $VERSION"
            released = new Date()
            vcsTag = VERSION
        }
    }
}

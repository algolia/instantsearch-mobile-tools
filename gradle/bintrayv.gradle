apply plugin: 'com.jfrog.bintray'

// add sources jar tasks as artifacts
artifacts {
    archives sourcesJar
    archives javadocJar
    archives file: new File("${project.buildDir}/outputs/aar/${project.name}-release.aar"),
            name: "${project.name}-release.aar",
            type: "aar"
}

// Create the pom configuration:
def pomConfig = {
    name CODENAME
    description DESC
    url WEBSITE

    licenses {
        license {
            name LICENSE
            url LICENSE_URL
            distribution "repo"
        }
    }
    developers {
        developer {
            id "algolia"
            name "The Algolia Team"
            email "hey@algolia.com"
        }
    }
    scm {
        connection REPO
        developerConnection REPO
        url WEBSITE

    }
}

publishing.publications {
    BintrayPublication(MavenPublication) {
        artifact sourcesJar
        artifact javadocJar
        artifact "${project.buildDir}/outputs/aar/${project.name}-release.aar"

        groupId project.ext.GROUP
        artifactId project.ext.BASENAME
        version project.ext.VERSION
        description project.ext.DESC

        pom.withXml {
            def root = asNode()
            root.children().last() + pomConfig
            root.appendNode("description", project.ext.DESC) //TODO Find why description is missing from pom.xml

            final dependenciesNode = asNode().appendNode('dependencies')
            println "Adding dependencies node"

            ext.addDependency = { Dependency dep, String scope ->
                if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified") {
                    return // ignore invalid dependencies
                }
                println "Adding dependency $dep.name ($scope) to pom.xml"
                final dependencyNode = dependenciesNode.appendNode('dependency')
                dependencyNode.appendNode('groupId', dep.group)
                dependencyNode.appendNode('artifactId', dep.name)
                dependencyNode.appendNode('version', dep.version)
                dependencyNode.appendNode('scope', scope)

                if (!dep.transitive) {
                    // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                    final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                    exclusionNode.appendNode('groupId', '*')
                    exclusionNode.appendNode('artifactId', '*')
                } else if (!dep.properties.excludeRules.empty) {
                    // Otherwise add specified exclude rules
                    final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                    dep.properties.excludeRules.each { ExcludeRule rule ->
                        exclusionNode.appendNode('groupId', rule.group ?: '*')
                        exclusionNode.appendNode('artifactId', rule.module ?: '*')
                    }
                }
            }

            // List all "api" dependencies (for new Gradle) as "compile" dependencies
            configurations.api.getAllDependencies().each { dep -> addDependency(dep, "compile") }
            // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
            configurations.implementation.getAllDependencies().each { dep -> addDependency(dep, "runtime") }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')

    publications = ['BintrayPublication']
    pkg {
        repo = 'maven'
        name = project.ext.CODENAME
        licenses = [project.ext.LICENSE]
        vcsUrl = project.ext.REPO
        publish = true
        version {
            name = project.ext.VERSION
            vcsTag = project.ext.VERSION
        }
    }
}
